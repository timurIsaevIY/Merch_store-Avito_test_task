// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_payments is a generated GoMock package.
package mock_payments

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentsUsecase is a mock of PaymentsUsecase interface.
type MockPaymentsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsUsecaseMockRecorder
}

// MockPaymentsUsecaseMockRecorder is the mock recorder for MockPaymentsUsecase.
type MockPaymentsUsecaseMockRecorder struct {
	mock *MockPaymentsUsecase
}

// NewMockPaymentsUsecase creates a new mock instance.
func NewMockPaymentsUsecase(ctrl *gomock.Controller) *MockPaymentsUsecase {
	mock := &MockPaymentsUsecase{ctrl: ctrl}
	mock.recorder = &MockPaymentsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentsUsecase) EXPECT() *MockPaymentsUsecaseMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockPaymentsUsecase) BuyItem(ctx context.Context, itemId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockPaymentsUsecaseMockRecorder) BuyItem(ctx, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockPaymentsUsecase)(nil).BuyItem), ctx, itemId)
}

// SendCoins mocks base method.
func (m *MockPaymentsUsecase) SendCoins(ctx context.Context, toUser string, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockPaymentsUsecaseMockRecorder) SendCoins(ctx, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockPaymentsUsecase)(nil).SendCoins), ctx, toUser, amount)
}

// MockPaymentsRepository is a mock of PaymentsRepository interface.
type MockPaymentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsRepositoryMockRecorder
}

// MockPaymentsRepositoryMockRecorder is the mock recorder for MockPaymentsRepository.
type MockPaymentsRepositoryMockRecorder struct {
	mock *MockPaymentsRepository
}

// NewMockPaymentsRepository creates a new mock instance.
func NewMockPaymentsRepository(ctrl *gomock.Controller) *MockPaymentsRepository {
	mock := &MockPaymentsRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentsRepository) EXPECT() *MockPaymentsRepositoryMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockPaymentsRepository) BuyItem(ctx context.Context, itemId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockPaymentsRepositoryMockRecorder) BuyItem(ctx, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockPaymentsRepository)(nil).BuyItem), ctx, itemId)
}

// Transfer mocks base method.
func (m *MockPaymentsRepository) Transfer(ctx context.Context, toUser string, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockPaymentsRepositoryMockRecorder) Transfer(ctx, toUser, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockPaymentsRepository)(nil).Transfer), ctx, toUser, amount)
}
