// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "Merch_store-Avito_test_task/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceUsecase is a mock of ServiceUsecase interface.
type MockServiceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUsecaseMockRecorder
}

// MockServiceUsecaseMockRecorder is the mock recorder for MockServiceUsecase.
type MockServiceUsecaseMockRecorder struct {
	mock *MockServiceUsecase
}

// NewMockServiceUsecase creates a new mock instance.
func NewMockServiceUsecase(ctrl *gomock.Controller) *MockServiceUsecase {
	mock := &MockServiceUsecase{ctrl: ctrl}
	mock.recorder = &MockServiceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUsecase) EXPECT() *MockServiceUsecaseMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockServiceUsecase) GetUserInfo(ctx context.Context) (models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx)
	ret0, _ := ret[0].(models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockServiceUsecaseMockRecorder) GetUserInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockServiceUsecase)(nil).GetUserInfo), ctx)
}

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockServiceRepository) GetUserInfo(ctx context.Context, userID uint) (models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockServiceRepositoryMockRecorder) GetUserInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockServiceRepository)(nil).GetUserInfo), ctx, userID)
}
